# -*- coding: utf-8 -*-
"""Real ML project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sRRwv9qq2R_VFBP4GkaAvb8vm1ortnw1

Importing required libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""Adding the data set"""

data = pd.read_csv('sample_data/mnist_train_small.csv')

"""Creating training data"""

data = np.array(data)
m, n = data.shape

data_dev = data[0:1000].T
Y_dev = data_dev[0]
X_dev = data_dev[1:n]
X_dev = X_dev / 255.

data_train = data[1000:m].T
Y_train = data_train[0]
X_train = data_train[1:n]
X_train = X_train / 255.
n_train, m_train = X_train.shape

"""Shape of our dataset"""

print(f"The shape of X_train data is:{X_train.shape}")
print(f"The shape of Y_train data is:{Y_train.shape}")

"""Defining our W and B parameters"""

def init_params():
    W1 = np.random.rand(20, 784) - 0.5
    B1 = np.random.rand(20, 18999) - 0.5
    W2 = np.random.rand(10, 20) - 0.5
    B2 = np.random.rand(10, 18999) - 0.5
    return W1, B1, W2, B2

"""ReLu function"""

def ReLu(Z):
    A = np.maximum(0,Z)
    return A

"""Softmax function"""

def softmax(Z):
    A = np.exp(Z) / sum(np.exp(Z))
    return A

"""One Hot Y function"""

def one_hot(Y):
    one_hot_Y = np.zeros((Y.max() + 1, Y.size))
    one_hot_Y[Y, np.arange(Y.size)] = 1;
    return one_hot_Y

"""Derivative of relu function"""

def ReLu_deriv(Z):
    return Z > 0

"""Forward prop function"""

def forward_prop(W1, B1, W2, B2, X):
    Z1 = np.dot(W1, X) + B1
    A1 = ReLu(Z1)
    Z2 = np.dot(W2, A1) + B2
    A2 = softmax(Z2)
    return Z1, A1, Z2, A2

"""Backward Propagation"""

def back_prop(Z1, A1, Z2, A2, W2, X, Y):
    m = Y.size
    Y_true = one_hot(Y)
    loss2 = A2 - Y_true
    dW2 = 1 / m * loss2.dot(A1.T)
    dB2 = 1 / m * np.sum(loss2)
    loss1 = W2.T.dot(loss2) * ReLu_deriv(Z1)
    dW1 = 1 / m * loss1.dot(X_train.T)
    dB1 = 1 / m * np.sum(loss1)
    return dW1, dB1, dW2, dB2

"""Update Parameters"""

def update_params(W1, B1, W2, B2, dW1, dB1, dW2, dB2, alpha):
    alpha = 0.1
    W1 = W1 - alpha * dW1
    B1 = B1 - alpha * dB1
    W2 = W2 - alpha * dW2
    B2 = B2 - alpha * dB2
    return W1, B1, W2, B2

"""Predictions"""

def get_predictions(A2):
    return np.argmax(A2, 0)

"""Accuracy"""

def get_accuracy(predictions, Y):
    print(predictions, Y)
    return np.sum(predictions == Y) / Y.size

"""Gradient Descent"""

def grad_descent(X, Y, alpha, iterations):
    W1, B1, W2, B2 = init_params()
    for i in range(iterations):
        Z1, A1, Z2, A2 = forward_prop(W1, B1, W2, B2, X)
        dW1, dB1, dW2, dB2 = back_prop(Z1, A1, Z2, A2, W2, X, Y)
        W1, B1, W2, B2 = update_params(W1, B1, W2, B2, dW1, dB1, dW2, dB2, alpha)
        if i % 20 == 0:
            print("Iteration: ", i)
            predictions = get_predictions(A2)
            print(get_accuracy(predictions, Y))
    return W1, B1, W2, B2

"""Calling Gradient Descent"""

W1, B1, W2, B2 = grad_descent(X_train, Y_train, 0.1, 500)